{"name":"Baseviewmodel","tagline":"BaseViewModel class for Knockout that enables Backbone like extension for viewmodels","body":"BaseViewModel\r\n=============\r\n\r\nBaseViewModel class for Knockout that enables Backbone like extension for viewmodels, based on ideas in [BaseViewModel](https://github.com/bmac/BaseViewModel) and [ko.ninja](https://github.com/jcreamer898/ko.ninja). Uses [Backbone's]() extend function to provide inheritance.\r\n\r\n## Getting started\r\n\r\nIf you wish to contribute to BaseViewModel's development, clone the project and install the dependencies with `npm install`. That's it!\r\n\r\nTo build the files for deployment, run `grunt build`.\r\n\r\nBaseViewModel is available on npm and bower and is a UMD module.\r\n\r\n## Examples\r\n\r\n### Create a BaseViewModel sub-class\r\n\r\nYou can extend the BaseViewModel class by using the `extend` method, passing in an object to be copied over to the new sub-class. Additionally, passing in a defaults hash will create default model observables on the sub-class.\r\n\r\n```javascript\r\nvar Person = BaseViewModel.extend({\r\n  defaults: {\r\n    type: 'Human',\r\n    getType: function() {\r\n      return 'Species: ' + this.type();\r\n    }\r\n  },\r\n  init: function(){\r\n    // Do something when class instantiated\r\n  }\r\n});\r\n\r\nvar me = new Person();\r\nme.type(); // 'Human'\r\nme.getType(); // 'Species: Human'\r\n```\r\n\r\n### Passing a model\r\n\r\nAs well as sub-classing, you can pass an object to the BaseViewModel class or one of it's sub-classes to act as the model for that view model.\r\n\r\n```javascript\r\nvar meModel = {\r\n  name: 'Lee',\r\n  age: 28,\r\n  address: {\r\n    city: 'London'\r\n  },\r\n  greeting: function() {\r\n    return 'Hello, I\\'m ' + this.name() + ' from ' + this.address.city();\r\n  }\r\n};\r\n\r\nvar me = new Person(meModel);\r\nme.name(); // 'Lee'\r\nme.age(); // 28\r\nme.address.city(); // 'London'\r\nme.greeting(); // 'Hello, I'm Lee from London'\r\n```\r\n\r\n### Getting back the model\r\n\r\nTo return the original model there is a toModel method to return the original model as an object, or a toJSON method that returns a JSON representation of the original model. Both methods ignore default properties.\r\n\r\n```javascript\r\nvar model = {\r\n  foo: 'foo',\r\n  bar: 'bar'\r\n};\r\nvar VM = new BaseViewModel.extend({\r\n  defaults: {\r\n    foobar: 'foobar'\r\n  }\r\n});\r\nvar myVM = new VM(model);\r\nvar obj = myVM.toModel();\r\nvar objJSON = myVM.toJSON();\r\n\r\nconsole.log(obj.foobar); // undefined\r\nconsole.log(obj.foo); // 'foo'\r\nconsole.log(obj); // { foo: 'foo', bar: 'bar' }\r\nconsole.log(objJSON); // '{\"foo\":\"foo\",\"bar\":\"bar\"}'\r\n```","google":"UA-2486550-2","note":"Don't delete this file! It's used internally to help with page regeneration."}